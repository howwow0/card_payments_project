services:
  h2-db:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: h2-keys-db
    ports:
      - "9094:9094"    # TCP сервер H2
      - "81:81"    # Веб-консоль H2
    environment:
      H2_USER: sa
      H2_PASSWORD: n4DxQ8vTpZ3
      H2_TCP_ALLOW_OTHERS: "true"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:81" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - backend-network

  cpp-security-service:
    build:
      context: .
      dockerfile: cpp-security-service/Dockerfile
    container_name: cpp-security-service
    ports:
      - "9010:9010"
    depends_on:
      h2-db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: default
    networks:
      - backend-network

  cpp-bank-gateway-service:
    build:
      context: .
      dockerfile: cpp-bank-gateway-service/Dockerfile
    container_name: cpp-bank-gateway-service
    ports:
      - "9002:9002"
    depends_on:
      h2-db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: default
    networks:
      - backend-network

  cpp-payment-gateway-service:
    build:
      context: .
      dockerfile: cpp-payment-gateway-service/Dockerfile
    container_name: cpp-payment-gateway-service
    ports:
      - "9000:9000"
    depends_on:
      h2-db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: default
    networks:
      - backend-network

  cpp-payment-orchestrator-service:
    build:
      context: .
      dockerfile: cpp-payment-orchestrator-service/Dockerfile
    container_name: cpp-payment-orchestrator-service
    ports:
      - "9001:9001"
    depends_on:
      h2-db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: default
    networks:
      - backend-network

  cpp-payment-processor-service:
    build:
      context: .
      dockerfile: cpp-payment-processor-service/Dockerfile
    container_name: cpp-payment-processor-service
    ports:
      - "9003:9003"
    depends_on:
      h2-db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: default
    networks:
      - backend-network
  cpp-logging-service:
    build:
      context: .
      dockerfile: cpp-logging-service/Dockerfile
    container_name: cpp-logging-service
    env_file:
      - .env
    ports:
      - "9020:9020"
    depends_on:
      - cpp-logging-database
    environment:
      SPRING_PROFILES_ACTIVE: default
    networks:
      - backend-network

  cpp-logging-liquibase:
    image: liquibase/liquibase:4.32.0
    depends_on:
      cpp-logging-database:
        condition: service_healthy
    environment:
      LIQUIBASE_COMMAND_URL: ${CPP_LOGGING_SERVICE_DATASOURCE_URL}
      LIQUIBASE_COMMAND_USERNAME: ${CPP_LOGGING_SERVICE_DATASOURCE_USERNAME}
      LIQUIBASE_COMMAND_PASSWORD: ${CPP_LOGGING_SERVICE_DATASOURCE_PASSWORD}
    env_file:
      - .env
    volumes:
      - ./cpp-logging-service/src/main/resources/db/changelog:/liquibase/changelog
    command:
      - --searchPath=/liquibase/changelog
      - --changelog-file=master.xml
      - --driver=org.postgresql.Driver
      - update
    networks:
      - backend-network
    restart: "no"

  cpp-logging-database:
    image: postgres:16
    environment:
      POSTGRES_USER: ${CPP_LOGGING_SERVICE_DATASOURCE_USERNAME}
      POSTGRES_PASSWORD: ${CPP_LOGGING_SERVICE_DATASOURCE_PASSWORD}
      POSTGRES_DB: cpp_logging_db
      POSTGRES_MULTIPLE_DATABASES: cpp_logging_db
    env_file:
      - .env
    volumes:
      - log_data:/var/lib/postgresql/data
    ports:
      - "5440:5432"
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${CPP_LOGGING_SERVICE_DATASOURCE_USERNAME} -d cpp_logging_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
  cpp-notification-service:
    build:
      context: .
      dockerfile: cpp-notification-service/Dockerfile
    container_name: cpp-notification-service
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "9030:9030"
    environment:
      SPRING_PROFILES_ACTIVE: default
    networks:
      - backend-network
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    ports:
      - "2181:2181"
    restart: unless-stopped
    networks:
      - backend-network
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - kafka_data:/var/lib/kafka/data
    restart: unless-stopped
    networks:
      - backend-network
networks:
  backend-network:
    driver: bridge
volumes:
  log_data:
  kafka_data: